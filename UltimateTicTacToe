import java.util.*;

public class UltimateTicTacToe {
    static int x;
    public static void main(String[] args) {
        int[][][][] board = new int[3][3][3][3];
        int[] currBoard = new int[] {-1, -1};

        Scanner s = new Scanner(System.in);
        System.out.println("X or O?");
        boolean player;
        String input = s.next();
        if(input.equalsIgnoreCase("X")) {
            player = true;
            x = 0;
        } else if(input.equalsIgnoreCase("O")) {
            player = false;
            x = 1;
        } else {
            System.out.println("Invalid input");
            s.close();
            return;
        }

        while(true) {
            if(player) {
                int x, y;
                if(currBoard[0] == -1) {
                    while(true) {
                        System.out.println("Enter coordinates of your desired board (0-2) without commas (e.g. 0 0).");
                        input = s.nextLine();
                        String[] temp = input.split(" ");
                        if(!isInteger(temp[0]) || !isInteger(temp[1])) {
                            System.out.println("Invalid input, please try again.");
                        } else {
                            x = Integer.parseInt(temp[0]);
                            y = Integer.parseInt(temp[1]);
                            if(x < 0 || x >= 3 || y < 0 || y >= 3) {
                                System.out.println("Invalid input, please enter another coordinate.");
                            } else if(isFull(board[y][x])) {
                                System.out.println("This board is already full.");
                            } else {
                                currBoard = new int[]{x, y};
                                break;
                            }
                        }
                    }
                }

                while(true) {
                    System.out.println("Enter coordinates of your choice (0-2) without commas (e.g. 0 0).");
                    input = s.nextLine();
                    String[] temp = input.split(" ");
                    if(!isInteger(temp[0]) || !isInteger(temp[1])) {
                        System.out.println("Invalid input, please try again.");
                    } else {
                        x = Integer.parseInt(temp[0]);
                        y = Integer.parseInt(temp[1]);
                        if(x < 0 || x >= 3 || y < 0 || y >= 3) {
                            System.out.println("Invalid input, please enter another coordinate.");
                        } else if(board[currBoard[1]][currBoard[0]][y][x] != 0) {
                            System.out.println("This coordinate is already taken.");
                        } else {
                            board[currBoard[1]][currBoard[0]][y][x] = -1;
                            currBoard = new int[] {y, x};
                            break;
                        }
                    }
                }

            } else {
                int[] bestMove = findBestMove(board, currBoard);
                board[currBoard[1]][currBoard[0]][bestMove[1]][bestMove[0]] = 1;
            }
            print(board);

            int state = eval(board);
            if(state == 1000) {
                System.out.println("Computer wins");
                break;
            } else if(state == -1000) {
                System.out.println("You win!");
                break;
            }

            boolean draw = true;
            for(int i = 0; i < 3; ++i) {
                for(int j = 0; j < 3; ++j) {
                    if(board[i][j][0][0] == Integer.MIN_VALUE) {
                        draw = false;
                        break;
                    }
                }
            }
            if(draw) {
                System.out.println("Draw");
                break;
            }

            player = !player;
        }
        s.close();
    }

    private static int[] findBestMove(int[][][][] board, int[] currBoard) {
        int best = Integer.MIN_VALUE;
        int bestX = -1;
        int bestY = -1;

        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                if(board[currBoard[1]][currBoard[0]][i][j] == 0) {
                    board[currBoard[1]][currBoard[0]][i][j] = 1;
                    int eval = minimax(board, currBoard,0, false);
                    board[currBoard[1]][currBoard[0]][i][j] = 0;
                    if(eval > best) {
                        best = eval;
                        bestX = j;
                        bestY = i;
                    }
                }
            }
        }

        return new int[] {bestX, bestY, best};
    }

    private static int minimax(int[][][][] board, int[] currBoard, int depth, boolean isAI) {
        int score = eval(board);
        if(score != 0) {
            return score;
        }

        boolean draw = true;
        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                if(!isFull(board[i][j])) {
                    draw = false;
                    break;
                }
            }
        }
        if(draw) {
            return 0;
        }

        if(isAI) {
            int best = Integer.MIN_VALUE;
            for(int i = 0; i < 3; ++i) {
                for(int j = 0; j < 3; ++j) {
                    if(board[currBoard[1]][currBoard[0]][i][j] == 0) {
                        int tempX = currBoard[0];
                        int tempY = currBoard[1];
                        board[currBoard[1]][currBoard[0]][i][j] = 1;
                        if(Math.abs(board[i][j][0][0]) > 1) {
                            currBoard = new int[] {-1, -1};
                        }
                        best = Math.max(minimax(board, currBoard, depth + 1, false), best);
                        board[currBoard[1]][currBoard[0]][i][j] = 0;
                    }
                }
            }
            return best - depth;
        } else {
            int best = Integer.MAX_VALUE;
            for(int i = 0; i < 3; ++i) {
                for(int j = 0; j < 3; ++j) {
                    if(board[currBoard[1]][currBoard[0]][i][j] == 0) {
                        board[currBoard[1]][currBoard[0]][i][j] = -1;
                        best = Math.min(minimax(board, currBoard,depth + 1, true), best);
                        board[currBoard[1]][currBoard[0]][i][j] = 0;
                    }
                }
            }
            return best + depth;
        }
    }

    private static int eval(int[][][][] board) {
        int[][] captured = new int[3][3];
        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                if(Math.abs(board[i][j][0][0]) == 2) {
                    captured[i][j] = board[i][j][0][0];
                } else {
                    captured[i][j] = 0;
                }
            }
        }

        int sum = 0;
        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                sum += captured[i][j];
            }
            if(Math.abs(sum) == 3) {
                return sum/6 * 1000;
            }
            sum = 0;
        }

        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                sum += captured[j][i];
            }
            if(Math.abs(sum) == 3) {
                return sum/6 * 1000;
            }
            sum = 0;
        }

        for(int i = 0; i < 3; ++i) {
            sum += captured[i][i];
        }
        if(Math.abs(sum) == 3) {
            return sum/6 * 1000;
        }
        sum = 0;

        for(int i = 0; i < 3; ++i) {
            sum += captured[i][2 - i];
        }
        if(Math.abs(sum) == 3) {
            return sum/6 * 1000;
        }
        sum = 0;

        return 0;
    }

    private static int[][] checkBoardWin(int[][] board) {
        int sum = 0;
        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                sum += board[i][j];
            }
            if(Math.abs(sum) == 3) {
                for(int[] row : board) {
                    Arrays.fill(row, sum/3 * 2);
                }
                return board;
            }
            sum = 0;
        }

        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                sum += board[j][i];
            }
            if(Math.abs(sum) == 3) {
                for (int[] row : board) {
                    Arrays.fill(row, sum/3 * 2);
                }
                return board;
            }
            sum = 0;
        }
        for(int i = 0; i < 3; ++i) {
            sum += board[i][i];
        }
        if(Math.abs(sum) == 3) {
            for(int[] row : board) {
                Arrays.fill(row, sum/3 * 2);
            }
            return board;
        }
        sum = 0;

        for(int i = 0; i < 3; ++i) {
            sum += board[i][2 - i];
        }
        if(Math.abs(sum) == 3) {
            for(int[] row : board) {
                Arrays.fill(row, sum/3 * 2);
            }
            return board;
        }

        if(isFull(board)) {
            for(int[] row : board) {
                Arrays.fill(row, Integer.MIN_VALUE);
                return board;
            }
        }
        return null;
    }

    private static boolean isFull(int[][] board) {
        for(int i = 0; i < 3; ++i) {
            for(int j = 0; j < 3; ++j) {
                if(board[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isInteger(String str) {
        try {
            Integer.parseInt(str);
        } catch(Exception e) {
            return false;
        }
        return true;
    }

    private static void print(int[][][][] board) {
        char[] symbols;
        if(x == 0) {
            symbols = new char[] {'X', ' ', 'O'};
        } else {
            symbols = new char[] {'O', ' ', 'X'};
        }

        for(int a = 0; a < 3; ++a) {
            for(int i = 0; i < 3; ++i) {
                for (int b = 0; b < 3; ++b) {
                    for (int j = 0; j < 2; ++j) {
                        System.out.print(symbols[board[a][b][i][j] + 1] + " | ");
                    }
                    System.out.print(symbols[board[a][b][i][2] + 1]);
                    if (b < 2) {
                        System.out.print(" || ");
                    } else {
                        System.out.println();
                    }
                }

                if(a < 2 && i == 2) {
                    System.out.println("====================================");
                } else if(i < 2) {
                    System.out.println("------------------------------------");
                }
            }
        }
    }
}
